#!/bin/bash

function set_app_file() {
    if [ "$#" -eq 1 ]; then
	APP_FILE_NAME=$1
	APP_FILE="-p APP_FILE=$1"
    else
	APP_FILE_NAME=
	APP_FILE=
    fi
}

function set_exit_flag() {
    if [ "$#" -eq 1 ]; then
	EXIT_FLAG="-p APP_EXIT=$1"
    else
	EXIT_FLAG=
    fi
}

function set_defaults() {
    TEST_MODE=false
    APPARGS=
    DEL_CLUSTER=false
    NAMED_CONFIG=clusterconfig
    DRIVER_CONFIG=
    SPARK_OPTIONS=
    GEN_CLUSTER_NAME=
    APP_NAME=
    RANDOM_NAME=false
    set_app_file
    set_exit_flag
}

function app_preamble() {
    if [ -z "$FIXED_APP_NAME" -o "$RANDOM_NAME" == true ]; then
        set +e
        SUFFIX=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 4 | head -n 1)
        set -e
        APP_NAME=app-$SUFFIX
    else
	APP_NAME=$FIXED_APP_NAME
    fi
    if [ "$GEN_CLUSTER_NAME" == "" ]; then
        GEN_CLUSTER_NAME=testenv
    fi
    MASTER_DC=$GEN_CLUSTER_NAME-m
    WORKER_DC=$GEN_CLUSTER_NAME-w
}

function set_fixed_app_name() {
    if [ "$#" -eq 1 ]; then
	FIXED_APP_NAME=$1
    else
	FIXED_APP_NAME=
    fi
}

function force_random_app_name() {
    RANDOM_NAME=true
}

function set_template() {
    TEMPLATE=$1
}

function set_git_uri() {
    if [ "$#" -eq 1 ]; then
	GIT_URI=$1
	SOURCE_INFO="-p GIT_URI=$1" 
    elif [ "$#" -eq 2 ]; then
	GIT_URI=$1
	SOURCE_INFO="-p GIT_URI=$1 -p GIT_REF=$2"
    else
	GIT_URI=
	SOURCE_INFO=
    fi
}

function set_image() {
    if [ "$#" -eq 1 ]; then
	SOURCE_INFO="-p IMAGE=$1"
    else
	SOURCE_INFO=
    fi
}

APP_MAIN_CLASS=
function set_app_main_class() {
    if [ "$#" -eq 1 ]; then
	APP_MAIN_CLASS="-p APP_MAIN_CLASS=$1"
    else
	APP_MAIN_CLASS=
    fi
}

function poll_build() {
    local status
    local BUILDNUM=$(oc get buildconfig $APP_NAME --template='{{index .status "lastVersion"}}')
    while true; do
        status=$(oc get build "$APP_NAME"-$BUILDNUM --template="{{index .status \"phase\"}}")
	if [ "$status" != "Complete" -a "$status" != "Failed" ]; then
	    echo Build for $APP_NAME status is $status, waiting ...
	elif [ "$status" == "Failed" ]; then
	    oc log buildconfig/$APP_NAME
	    oc delete buildconfig $APP_NAME
	    oc delete is $APP_NAME
	    set +e
	    oc delete dc $APP_NAME
	    set -e
	    return 1
	else
	    break
	fi
	sleep 30
    done
}

function run_app() {
    app_preamble
    set +e
    # If is a build is necessary, it can take a long time and this can cause tests in
    # environments like travis to time out from lack of output.  So if the imagestream
    # associated with APP_NAME doesn't already exist, watch the build log to produce log
    # output and prevent timeout.
    oc get is $APP_NAME &> /dev/null
    local stream_exists=$?
    oc new-app --file=$TEMPLATE $SOURCE_INFO -p APPLICATION_NAME=$APP_NAME -p APP_ARGS="$APPARGS" -p OSHINKO_DEL_CLUSTER=$DEL_CLUSTER -p OSHINKO_NAMED_CONFIG=$NAMED_CONFIG -p OSHINKO_SPARK_DRIVER_CONFIG=$DRIVER_CONFIG -p OSHINKO_CLUSTER_NAME=$GEN_CLUSTER_NAME -p SPARK_OPTIONS="$SPARK_OPTIONS" $APP_FILE $EXIT_FLAG $APP_MAIN_CLASS &> /dev/null
    set -e
    # Allow some tests to skip the wait for the running app, because they don't care
    if [ "$#" -eq 0 ]; then
	if [ "$stream_exists" -ne 0 ]; then
            poll_build
	fi
        os::cmd::try_until_text 'oc logs dc/"$APP_NAME"' 'cluster' $((10*minute))
    fi
}

function run_app_without_optionals() {
    app_preamble
    set +e
    oc get is $APP_NAME &> /dev/null
    local stream_exists=$?
    oc new-app --file=$TEMPLATE $SOURCE_INFO -p APPLICATION_NAME=$APP_NAME -p OSHINKO_CLUSTER_NAME=$GEN_CLUSTER_NAME $APP_MAIN_CLASS &> /dev/null
    set -e
    if [ "$stream_exists" -ne 0 ]; then
       poll_build
    fi
    os::cmd::try_until_text 'oc logs dc/"$APP_NAME"' 'cluster'  $((10*minute))
}

function run_app_without_clustername() {
    app_preamble
    set +e
    oc get is $APP_NAME &> /dev/null
    local stream_exists=$?
    oc new-app --file=$TEMPLATE $SOURCE_INFO -p APPLICATION_NAME=$APP_NAME $APP_MAIN_CLASS &> /dev/null
    set -e
    if [ "$stream_exists" -ne 0 ]; then
       poll_build
    fi
    os::cmd::try_until_text 'oc logs dc/"$APP_NAME"' 'cluster'  $((10*minute))
}

function run_app_without_application_name() {
    app_preamble
    oc new-app --file=$TEMPLATE $SOURCE_INFO $APP_MAIN_CLASS &> /dev/null
}

function test_no_app_name {
    set_defaults
    os::cmd::expect_success 'oc delete buildconfig -l app'
    os::cmd::try_until_text 'oc get buildconfig -l app' 'No resources found'
    run_app_without_application_name
    os::cmd::try_until_not_text 'oc get buildconfig -l app' 'No resources found' $((10*minute))
    NAME=$(oc get buildconfig -l app --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc logs "$NAME"-1-build | grep "$GIT_URI"'  $((5*minute)) 
    os::cmd::try_until_success 'oc get dc/"$NAME"'
    os::cmd::try_until_success 'oc get is/"$NAME"'
    os::cmd::expect_success 'oc delete buildconfig "$NAME"'
    os::cmd::expect_success 'oc delete is "$NAME"'
    os::cmd::expect_success 'oc delete dc "$NAME"'
}

function test_app_args {
    set_defaults
    APPARGS="doodleydoodley"
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "APP_ARGS=doodleydoodley$"'  $((5*minute))
    cleanup_app

    run_app_without_optionals
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "APP_ARGS=$"'  $((5*minute))
    cleanup_app
}

function test_podinfo {
    set_defaults
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- ls /etc/podinfo/labels'
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep POD_NAME="$DRIVER"'  $((5*minute))
    cleanup_app
}

function test_del_cluster {
    set_defaults
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_DEL_CLUSTER=false$"'  $((5*minute))
    cleanup_app

    DEL_CLUSTER=true
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_DEL_CLUSTER=true$"'  $((5*minute))
    cleanup_app

    run_app_without_optionals
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_DEL_CLUSTER=true$"'  $((5*minute))
    cleanup_app
}

function test_cluster_name {
    set_defaults
    DEL_CLUSTER=true
    GEN_CLUSTER_NAME=jerry
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_CLUSTER_NAME=jerry"'  $((5*minute))
    cleanup_app

    run_app_without_clustername
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_CLUSTER_NAME=$"'  $((5*minute))
    cleanup_app
}

function test_no_source_or_image {
    set_defaults
    app_preamble
    os::cmd::expect_failure 'oc new-app --file="$TEMPLATE"'
}

function test_named_config {
    set_defaults
    NAMED_CONFIG=myconfig
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_NAMED_CONFIG=myconfig$"' $((5*minute))
    cleanup_app

    run_app_without_optionals
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_NAMED_CONFIG=$"' $((5*minute))
    cleanup_app
}

function test_app_file {
    # Look in the default app for the app_file value unset
    set_defaults
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep APP_FILE=$' $((10*minute))
    cleanup_app

    # Because the dc is bundled with a buildconfig, this will cause a new build. Force a different
    # app name so that the build doesn't conflict and we can keep the default one around.
    force_random_app_name
    set_app_file $1
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep APP_FILE="$APP_FILE_NAME"$' $((10*minute))
    cleanup_app
    oc delete buildconfig $APP_NAME &> /dev/null
    oc delete is $APP_NAME &> /dev/null
}

function test_git_ref {
    local old_source=$SOURCE_INFO
    local commit=$2 # commit value has to be named for os::cmd to do the substitution
    set_defaults

    # We want a new build to reference the git_ref but we don't want to delete the old build, so
    # force a new app name
    force_random_app_name
    set_git_uri $1 $commit
    run_app skipwait
    SOURCE_INFO=$old_source
    os::cmd::try_until_success 'oc logs "$APP_NAME"-1-build | grep -e "Commit:[[:space:]]" | grep "$commit"'
    cleanup_app
    os::cmd::expect_success 'oc delete buildconfig "$APP_NAME"'
    os::cmd::expect_success 'oc delete is "$APP_NAME"'
}

function test_driver_config {
    set_defaults
    DRIVER_CONFIG=myconfig
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_SPARK_DRIVER_CONFIG=myconfig$"'  $((5*minute))
    cleanup_app

    run_app_without_optionals
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "OSHINKO_SPARK_DRIVER_CONFIG=$"'  $((5*minute))
    cleanup_app
}

function test_spark_options {
    set_defaults
    SPARK_OPTIONS="--conf somevalue=1"
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "SPARK_OPTIONS=--conf somevalue=1"'  $((5*minute))
    cleanup_app

    run_app_without_optionals
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "SPARK_OPTIONS=$"'  $((5*minute))
    cleanup_app
}

function test_exit {
    set_defaults
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "APP_EXIT=false"'  $((10*minute))
    cleanup_app

    set_exit_flag true
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "APP_EXIT=true"'  $((10*minute))
    cleanup_app

    set_exit_flag false
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "APP_EXIT=false"'  $((10*minute))
    cleanup_app
}

function test_fixed_exit {
    set_defaults
    run_app
    DRIVER=$(oc get pod -l deploymentconfig=$APP_NAME --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc exec "$DRIVER" -- env | grep "APP_EXIT=true"'  $((10*minute))
    cleanup_app
}

function fix_template() {
    local file=$1
    local original_image=$2
    local new_image=$3
    # If the integrated registry is defined, then we have to do a push of the local image
    # into the project and modify the template to use an ImageStreamTag
    if [ -n "$S2I_TEST_INTEGRATED_REGISTRY" ]; then
        set +e
        docker login --help | grep email &> /dev/null
        local res=$?
        set -e
        if [ "$res" -eq 0 ]; then
            docker login -u $(oc whoami) -e jack@jack.com -p $(oc whoami -t) ${S2I_TEST_INTEGRATED_REGISTRY}
        else
            docker login -u $(oc whoami) -p $(oc whoami -t) ${S2I_TEST_INTEGRATED_REGISTRY}
        fi
        docker tag ${new_image} ${S2I_TEST_INTEGRATED_REGISTRY}/${PROJECT}/${new_image}
        docker push ${S2I_TEST_INTEGRATED_REGISTRY}/${PROJECT}/${new_image}
        sed -i "s^\"kind\": \"DockerImage\"^\"kind\": \"ImageStreamTag\"^" $file
        sed -i "s^\"name\": \"$original_image\"^\"name\": \"$new_image:latest\"^" $file

    # if the integrated registry is not defined then we just use DockerImage with the local image
    # and remove the forcePull (forcePull will break the ability of "oc cluster up" to grab the local image)
    else
        sed -i "s^\"name\": \"$original_image\"^\"name\": \"$new_image\"^" $file
        sed -i "s^\"forcePull\".*^^" $file
    fi
}

function check_image {
    set_defaults
    run_app skip_wait
    os::cmd::try_until_success 'oc get buildconfig "$APP_NAME"' $((10*minute))
    IMAGE=$(oc get buildconfig $APP_NAME --template='{{index .spec "strategy" "sourceStrategy" "from" "name"}}')
    KIND=$(oc get buildconfig $APP_NAME --template='{{index .spec "strategy" "sourceStrategy" "from" "kind"}}')
    os::cmd::expect_success 'echo "$IMAGE" | grep "$S2I_TEST_IMAGE_PYSPARK"'
    if [ -n "$S2I_TEST_INTEGRATED_REGISTRY" ]; then
        os::cmd::expect_success 'echo "$KIND" | grep "ImageStreamTag"'
    else
        os::cmd::expect_success 'echo "$KIND" | grep "DockerImage"'
    fi
    oc delete buildconfig $APP_NAME &> /dev/null
    oc delete is $APP_NAME &> /dev/null
    set +e
    oc delete dc $APP_NAME &> /dev/null
    set -e
}
