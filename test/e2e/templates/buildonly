#!/bin/bash

# These are additional functions (and overloads in the case of run_app) for the build templates
# (those that only build and do not create a deploymentconfig)

function run_app() {
    app_preamble
    set +e
    oc get is $APP_NAME &> /dev/null
    local stream_exists=$?
    oc new-app --file=$TEMPLATE $SOURCE_INFO -p APPLICATION_NAME="$APP_NAME" $APP_FILE &> /dev/null
    # Allow some tests to skip the wait for the running app, because they don't care
    if [ "$#" -eq 0 ]; then
        if [ "$stream_exists" -ne 0 ]; then
            poll_build
	    return $?
        fi
    fi
    set -e
}

function build_test_no_app_name {
    set_defaults
    os::cmd::expect_success 'oc delete buildconfig -l app'
    os::cmd::try_until_text 'oc get buildconfig -l app' 'No resources found'
    run_app_without_application_name
    os::cmd::try_until_not_text 'oc get buildconfig -l app' 'No resources found' $((10*minute))
    NAME=$(oc get buildconfig -l app --template='{{index .items 0 "metadata" "name"}}')
    os::cmd::try_until_success 'oc logs "$NAME"-1-build | grep "$GIT_URI"'
    os::cmd::try_until_success 'oc get is/"$NAME"'
    os::cmd::expect_success 'oc delete buildconfig "$NAME"'
    os::cmd::expect_success 'oc delete is "$NAME"'
}

function build_test_app_file {
    set_defaults
    run_app # runs the build
    os::cmd::try_until_text 'oc get build "$APP_NAME"-1 --template="{{index .status \"phase\"}}"' "Complete" $((10*minute))
    PULL_SPEC=$(oc describe is $APP_NAME | grep "Docker Pull Spec" | awk '{ print $4; }')
    # The image won't actually run since we're not using a template with all the necessary envs for start.sh
    # So just create the pod and check the environment
    os::cmd::expect_success 'oc run test-"$APP_NAME" --image="$PULL_SPEC" --restart=Never --command -- env'
    os::cmd::try_until_success 'oc logs test-"$APP_NAME" | grep APP_FILE="$APP_FILE_NAME"$' $((5*minute))

    force_random_app_name
    set_app_file $1
    run_app # runs the build
    os::cmd::try_until_text 'oc get build "$APP_NAME"-1 --template="{{index .status \"phase\"}}"' "Complete" $((10*minute))
    PULL_SPEC=$(oc describe is $APP_NAME | grep "Docker Pull Spec" | awk '{ print $4; }')
    # The image won't actually run since we're not using a template with all the necessary envs for start.sh
    # So just create the pod and check the environment
    os::cmd::expect_success 'oc run test-"$APP_NAME" --image="$PULL_SPEC" --restart=Never --command -- env'
    os::cmd::try_until_success 'oc logs test-"$APP_NAME" | grep APP_FILE="$APP_FILE_NAME"$' $((5*minute))
    oc delete buildconfig $APP_NAME &> /dev/null
    oc delete is $APP_NAME &> /dev/null
}
