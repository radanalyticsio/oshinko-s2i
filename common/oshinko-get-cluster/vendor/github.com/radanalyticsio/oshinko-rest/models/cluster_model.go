package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ClusterModel cluster model

swagger:model ClusterModel
*/
type ClusterModel struct {
	NewCluster

	/* URL to the spark master

	Required: true
	*/
	MasterURL *string `json:"masterUrl"`

	/* URL to the spark master web UI

	Required: true
	*/
	MasterWebURL *string `json:"masterWebUrl"`

	/* Pods that make up the cluster

	Required: true
	*/
	Pods []*ClusterModelPodsItems0 `json:"pods"`

	/* Current status for the cluster

	Required: true
	*/
	Status *string `json:"status"`
}

// Validate validates this cluster model
func (m *ClusterModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.NewCluster.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterWebURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterModel) validateMasterURL(formats strfmt.Registry) error {

	if err := validate.Required("masterUrl", "body", m.MasterURL); err != nil {
		return err
	}

	return nil
}

func (m *ClusterModel) validateMasterWebURL(formats strfmt.Registry) error {

	if err := validate.Required("masterWebUrl", "body", m.MasterWebURL); err != nil {
		return err
	}

	return nil
}

func (m *ClusterModel) validatePods(formats strfmt.Registry) error {

	if err := validate.Required("pods", "body", m.Pods); err != nil {
		return err
	}

	for i := 0; i < len(m.Pods); i++ {

		if swag.IsZero(m.Pods[i]) { // not required
			continue
		}

		if m.Pods[i] != nil {

			if err := m.Pods[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ClusterModel) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

/*ClusterModelPodsItems0 cluster model pods items0

swagger:model ClusterModelPodsItems0
*/
type ClusterModelPodsItems0 struct {

	/* IP address of the pod

	Required: true
	*/
	IP *string `json:"ip"`

	/* Pod status

	Required: true
	*/
	Status *string `json:"status"`

	/* Type of pod

	Required: true
	*/
	Type *string `json:"type"`
}

// Validate validates this cluster model pods items0
func (m *ClusterModelPodsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterModelPodsItems0) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *ClusterModelPodsItems0) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ClusterModelPodsItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
