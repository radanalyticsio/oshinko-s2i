package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*ErrorModel error model

swagger:model ErrorModel
*/
type ErrorModel struct {

	/* An explanation of the specific error that has occurred

	Required: true
	*/
	Details *string `json:"details"`

	/* HTTP status code

	Required: true
	*/
	Status *int32 `json:"status"`

	/* A brief summary of the error, this should remain consistent
	between errors of the same class

	Required: true
	*/
	Title *string `json:"title"`
}

// Validate validates this error model
func (m *ErrorModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorModel) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *ErrorModel) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ErrorModel) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}
