package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/radanalyticsio/oshinko-rest/models"
)

// FindSingleClusterReader is a Reader for the FindSingleCluster structure.
type FindSingleClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindSingleClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewFindSingleClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewFindSingleClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewFindSingleClusterOK creates a FindSingleClusterOK with default headers values
func NewFindSingleClusterOK() *FindSingleClusterOK {
	return &FindSingleClusterOK{}
}

/*FindSingleClusterOK handles this case with default header values.

Cluster detail response
*/
type FindSingleClusterOK struct {
	Payload *models.SingleCluster
}

func (o *FindSingleClusterOK) Error() string {
	return fmt.Sprintf("[GET /clusters/{name}][%d] findSingleClusterOK  %+v", 200, o.Payload)
}

func (o *FindSingleClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SingleCluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSingleClusterDefault creates a FindSingleClusterDefault with default headers values
func NewFindSingleClusterDefault(code int) *FindSingleClusterDefault {
	return &FindSingleClusterDefault{
		_statusCode: code,
	}
}

/*FindSingleClusterDefault handles this case with default header values.

Unexpected error
*/
type FindSingleClusterDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the find single cluster default response
func (o *FindSingleClusterDefault) Code() int {
	return o._statusCode
}

func (o *FindSingleClusterDefault) Error() string {
	return fmt.Sprintf("[GET /clusters/{name}][%d] findSingleCluster default  %+v", o._statusCode, o.Payload)
}

func (o *FindSingleClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
